set nocompatible              " be iMproved, required
filetype off                  " required

" Plugins {{{
" Define bundles via GitHub repositories
call plug#begin('~/.vim/plugged')
  " General {{{
    Plug 'editorconfig/editorconfig-vim', { 'tag': 'v1.1.1' }
  " }}}

  " Syntax {{{
    Plug 'vim-scripts/jade.vim', { 'for': ['jade'], 'tag': '1.1' }
    Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
    Plug 'saltstack/salt-vim', { 'for': ['sls'] }
    Plug 'elixir-lang/vim-elixir', { 'for': ['elixir'] }
    Plug 'fatih/vim-go', { 'for': ['go'], 'tag': 'v1.19' , 'do': ':GoInstallBinaries' }
    Plug 'elzr/vim-json', { 'for': ['json'] }
    Plug 'fatih/vim-nginx', { 'for': ['nginx'] }
    Plug 'vim-ruby/vim-ruby', { 'for': ['ruby'], 'tag': 'stable-20160928' }
    Plug 'cespare/vim-toml', { 'for': ['toml'] }
  " }}}

  " UI/UX {{{
    Plug 'chriskempson/base16-vim'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    Plug 'majutsushi/tagbar', { 'on': 'TagbarToggle', 'tag': 'v2.7' }
    Plug 'airblade/vim-gitgutter'
    Plug 'christoomey/vim-tmux-navigator', { 'tag': 'v1.0' }
  " }}}

  " Completion {{{
    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins'}
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif
    Plug 'Shougo/neoinclude.vim'
  " }}}

  " Miscellaneous {{{
    Plug 'tpope/vim-fugitive'
    Plug 'scrooloose/nerdcommenter', { 'tag': '2.5.1' }
    Plug 'vim-syntastic/syntastic', { 'on': 'SyntasticCheck', 'tag': '3.8.0' }
    Plug 'godlygeek/tabular', { 'tag': '1.0.0' }
    Plug 'mbbill/undotree', { 'on': 'UndotreeToggle', 'tag': 'rel_5.0' }
    Plug 'rhysd/vim-clang-format', { 'for': ['c', 'cpp', 'proto'] }
  " }}}
call plug#end()
" }}}

" Plugin Configuration {{{
  " Plugin: vim-base16 {{{
    if filereadable(expand("~/.vimrc_background"))
      let base16colorspace=256  " Access colors present in 256 colorspace
      source ~/.vimrc_background
    endif
  " }}}

  " Plugin: deoplete.nvim {{{
    let g:deoplete#enable_at_startup = 1

    " <TAB>: completion.
    " <Tab> to cycle forwards
    inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
    " <Shift> + <Tab> to cycle backwards
    inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
  " }}}

  " Plugin: vim-gitgutter {{{
    let g:gitgutter_realtime = 0  " no realtime updates upon Stop typing event
    let g:gitgutter_eager = 0     " disable eager updates
  " }}}

  " Plugin: vim-go {{{
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_interfaces = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    autocmd FileType go set number fo+=croq tw=100
    autocmd Filetype go set makeprg=go\ build\ .
  " }}}

  " Plugin: NERDCommenter {{{
    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1
  " }}}

  " Plugin: tagbar {{{
    nmap <S-t> :TagbarToggle<CR>
  " }}}

  " Plugin: fzf {{{
    " Use rg instead when we call find
    " --column: Show column number
    " --line-number: Show line number
    " --no-heading: Do not show file headings in results
    " --fixed-strings: Search term as a literal string
    " --ignore-case: Case insensitive search
    " --no-ignore: Do not respect .gitignore, etc...
    " --hidden: Search hidden files and folders
    " --follow: Follow symlinks
    " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
    " --color: Search color options
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

  " }}}
" }}}

let $vim_root = "~/.vim"
source $vim_root/core/general.vim
" highlight column 81 and 121
let &colorcolumn="80,".join(range(120,999),",")

" Spacing {{{
  set smarttab                        " Be smart when using tabs ;)
  set expandtab                       " Use spaces instead of spaces
  filetype plugin indent on           " Load filetype-specific indentation

  " 1 tab == 4 spaces
  set shiftwidth=4
  set tabstop=4
" }}}

" Commands {{{
  " :W sudo saves the file
  " (useful for handling the permission-denied error)
  command W w !sudo tee % > /dev/null
" }}}

" Autocomplete {{{
  set wildmenu                                " Turn on the WiLd menu
  set wildmode=list:full

  " Compiled object files
  set wildignore=*.o,*.obj,*.exe,*.dll,*~,*.pyc
  " Version Control
  if has("win16") || has("win32")
      set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
  else
      set wildignore+=.git\*,.hg\*,.svn\*
  endif
  " LaTeX intermediate files
  set wildignore+=*.aux,*.out,*.toc
  " Images
  set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
  " Compiled spelling lists
  set wildignore+=*.spl
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

if has("cscope")
  " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
  set cscopetag
  " check cscope for definition of a symbol before checking ctags: set to 1
  " if you want the reverse search order.
  set csto=1
endif

" Height of the command bar
set cmdheight=2


" Configure backspace so it acts as it should act
set backspace=eol,start,indent

set whichwrap+=<,>,h,l


" Search {{{
  set gdefault      " Default global search flag
  set ignorecase    " Ignore case when searching
  set incsearch     " Dynamic highlighting
  set smartcase     " When searching, try to be smart about cases
  set hlsearch      " Highlight search results
  set magic         " For regular expressions turn magic on
" }}}

" Folding {{{
  set foldenable            " Enable folds
  set foldlevelstart=10     " Open most folds by default
  set foldnestmax=7         " 8 nested fold max
  set foldmethod=syntax     " Fold based on file syntax
" }}}


" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500



" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac


" Undo/Backup/Swap {{{
  if !isdirectory(expand("~/.vim/undo/"))
    silent !mkdir -p ~/.vim/undo
  endif

  set nobackup              " No backup files
  set nowritebackup         " No backup files while editing
  set noswapfile            " No swap file

  " Undotree {{{
    if has("persistent_undo")
      set undodir^=~/.vim/undo/                  " Directory to put undo files
      set undofile
    endif
  " }}}
" }}}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Linebreak on 500 characters
set lbr
set tw=500

set ai    " Auto indent
set si    " Smart indent
set wrap  " Wrap lines


" Mappings {{{
  " With a map leader it's possible to do extra key combinations
  let mapleader = ","
  let g:mapleader = ","

  " Disable <F1> for :help
  nnoremap <F1> <nop>

  " tbh who actually uses q:
  nnoremap q: :q

  " Visual mode pressing * or # searches for the current selection
  " Super useful! From an idea by Michael Naumann
  vnoremap <silent> * :call VisualSelection('f', '')<CR>
  vnoremap <silent> # :call VisualSelection('b', '')<CR>

  " Treat long lines as break lines (useful when moving around in them)
  nnoremap j gj
  nnoremap k gk
  nnoremap J gj
  nnoremap K gk

  " Disable highlight when <leader><cr> is pressed
  nnoremap <silent> <leader><cr> :noh<cr>

  " Fast saving
  nnoremap <leader>w :w!<cr>

  " Smart way to move between windows
  nnoremap <C-j> <C-W>j
  nnoremap <C-k> <C-W>k
  nnoremap <C-h> <C-W>h
  nnoremap <C-l> <C-W>l

  " Close the current buffer
  nnoremap <leader>bd :Bclose<cr>:tabclose<cr>gT

  " Close all the buffers
  nnoremap <leader>ba :bufdo bd<cr>

  " Easier buffer navigation
  nnoremap <Tab> :bnext<cr>
  nnoremap <S-Tab> :bprevious<cr>
  map <leader>b :ls<CR>:b

  " Useful mappings for managing tabs
  map <leader>tn :tabnew<cr>
  map <leader>to :tabonly<cr>
  map <leader>tc :tabclose<cr>
  map <leader>tm :tabmove
  map <leader>t<leader> :tabnext

  " Let 'tl' toggle between this and the last accessed tab
  let g:lasttab = 1
  nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
  au TabLeave * let g:lasttab = tabpagenr()

  " Code folding options {{{
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>
  " }}}

  " Spell-checking {{{
    " Pressing ,ss will toggle and untoggle spell checking
    map <leader>ss :setlocal spell!<cr>

    " Shortcuts using <leader>
    " next spelling error
    map <leader>sn ]s
    " previous spelling error
    map <leader>sp [s
    " add word to spelling dictionary
    map <leader>sa zg
    " view spelling correction suggestions
    map <leader>s? z=
  " }}}

  " Plugin: Undotree {{{
    nnoremap <Leader>u :UndotreeToggle<CR>
    " If undotree is opened, it is likely one wants to interact with it.
    let g:undotree_SetFocusWhenToggle=1
  " }}}

  " Plugin: NERDTree {{{
    map <C-n> :NERDTreeToggle %<CR>
  " }}}
  " Plugin: fzf.vim {{{
    nnoremap <silent> <leader><space> :Files<CR>
    nnoremap <silent> <leader>a :Buffers<CR>
    nnoremap <silent> <leader>A :Windows<CR>
  " }}}
" }}}

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" statusline
source ~/.vim/modules/statusline.vim

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm


" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" Automatically update spell files when changes are detected
for d in glob('~/.vim/spell/*.add', 2, 1)
  if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
    exec 'mkspell! ' . fnameescape(d)
  endif
endfor


" Helper Functions {{{
  function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
  endfunction

  function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
      execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
      call CmdLine("Ag \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
      call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
      execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
  endfunction

  " Returns true if paste mode is enabled
  function! HasPaste()
    if &paste
      return 'PASTE MODE  '
    endif
    return ''
  endfunction

  " Don't close window, when deleting a buffer
  command! Bclose call <SID>BufcloseCloseIt()
  function! <SID>BufcloseCloseIt()
     let l:currentBufNum = bufnr("%")
     let l:alternateBufNum = bufnr("#")

     if buflisted(l:alternateBufNum)
       buffer #
     else
       bnext
     endif

     if bufnr("%") == l:currentBufNum
       new
     endif

     if buflisted(l:currentBufNum)
       execute("bdelete! ".l:currentBufNum)
     endif
  endfunction
" }}}

" Languages {{{
  " Python {{{
    let python_highlight_all = 1
    au FileType python syn keyword pythonDecorator True None False self

    au BufNewFile,BufRead *.jinja set syntax=htmljinja
    au BufNewFile,BufRead *.mako set ft=mako

    au FileType python map <buffer> F :set foldmethod=indent<cr>

    au FileType python inoremap <buffer> $r return
    au FileType python inoremap <buffer> $i import
    au FileType python inoremap <buffer> $p print
    au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
    au FileType python map <buffer> <leader>1 /class
    au FileType python map <buffer> <leader>2 /def
    au FileType python map <buffer> <leader>C ?class
    au FileType python map <buffer> <leader>D ?def
  " }}}

  " JavaScript {{{
    au FileType javascript setl fen
    au FileType javascript setl nocindent

    au FileType javascript imap <c-t> $log();<esc>hi
    au FileType javascript imap <c-a> alert();<esc>hi

    au FileType javascript inoremap <buffer> $r return
    au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi
  " }}}

  " gitcommit {{{
    au FileType gitcommit call setpos('.', [0, 1, 1, 0])
  " }}}
" }}}

" Miscellaneous {{{
  set lazyredraw    " Don't redraw while executing macros
  set showmatch     " Highlight matching brackets
  set autoread      " Read when a file is changed from the outside
  set shortmess+=I  " Remove startup message

  " In many terminal emulators the mouse works just fine, thus enable it.
  if has('mouse')
    set mouse=a
  endif

  " Case insensitve filename completion
  if exists("&wildignorecase")
    set wildignorecase
  endif

  " Disable modelines
  set nomodeline
" }}}

" Machine-specific local config {{{
  if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
  endif
" }}}
