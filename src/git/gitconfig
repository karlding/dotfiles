[alias]
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # List contributors with number of commits and email addresses
    contributors = shortlog --summary --numbered --email

    # Visualizing branch topology (visual log)
    # http://stackoverflow.com/questions/1838873/visualizing-branch-topology-in-git/34467298#34467298
    vlog = !"git lg3-specific --all"

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'

    uncommit = reset --soft HEAD~
    unstage = reset HEAD --

    # Add all files to staging area
    aa = add --all

    # Add files using patch
    ap = add --patch

    # Commit using verbose output
    ci = commit -v

    # Checkout
    co = checkout

    # Status
    st = status

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Gerrit aliases
    push-for-review = push origin HEAD:refs/for/master
    push-for-review-branch = !git push origin HEAD:refs/for/$1
    push-as-draft = push origin HEAD:refs/drafts/master
    push-as-draft-branch = !git push origin HEAD:refs/drafts/$1

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto

[core]
    filemode = true

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Use global gitignore file
    excludesfile = ~/.gitignore

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

[diff]
    # Detect copies as well as renames
    renames = copies

    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for diffs
    mnemonicprefix = true

    # Use patience diff by default
    algorithm = patience

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[push]
    # Prevent disasters when doing things like `git push -f`
    # Requires git version >= 2 (which was released in 2014)
    #
    # To use `matching` instead, add this to your `~/.extra` file:
    # `git config --global push.default matching`. See http://git.io/mMah-w.
    default = simple

    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[user]
    # Don't guess the user's identity
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
    useConfigOnly = true

[include]
    # Include local gitconfig for Git (1.7.10+)
    # https://git-scm.com/docs/git-config#_includes
    path = ~/.gitconfig.local

# vim:ft=gitconfig
